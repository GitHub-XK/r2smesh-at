RECIPE TO START USING THIS R2S IMPLEMENTATION
===============================================

First, define ``R2S_ROOT`` variable, which points to this folder. This can be done by 
e.g. adding the following line to the ``~/.profile``::

    export R2S_ROOT=/path/to/this/folder


Create the working place, i.e. a folder containing the following files::

    input/meshtal.fine            # meshtal with neutron flux intensities
    input/meshtal.coarse          # meshtal with neutron spectra
    input/fine_mesh_content       # material allocatiaon in the mesh
    input/mat_table               # Material compositions
    input/cmi_table               # Cell and material indices, names and densities.
    input/inventory_input_footer  # Irradiation scenario in fispact format.

    r2s_env.sh                    # script to setup environment variables

In the simplest case, only one of these files must be prepared by hands: this
is the file containing irradiation scenario ``input/inventory_input_footer``.
The other files are obtained by processing MCNP output files. 

Files ``meshtal.fine`` and ``meshtal.coarse`` are parts of the meshtal file, as
generated by MCNP5 during neutron transport. Assuming that in the ``meshtal``
file written by MCNP5 the first tally correponds to the fine mesh with neutron
flux intensities and the second tally -- to the coarse mesh with neutron flux
spectra, the following commands create the necessary files::

    > csplit meshtal '/Mesh Tally /' '{*}'   # split meshtal at lines containing "Mesh Tally " to xx?? files
    > mv xx01 meshtal.fine                   # xx00 contains meshtal header (mcnp version prodid, nps)
    > mv xx02 meshtal.coarse                 # xx01 and xx02 contain the 1-st and 2-nd tallies.

Material allocation file, ``fine_mesh_content`` is generated by the modified
version of MCNP5, ``$R2S_ROOT/bin/mcnp5-md.mpi``.  To the original MCNP input
file, used for neutron transport, add the ``IDUM`` card with two entries: the
first entry specifies the number of hits per cm3, the second -- mesh tally
number where materials are detected. Usually, this is the fine mesh used
for neutron flux intensity.  One can use an existing runtpe file from the
neutron transport (one can thus save initialization time!) and perform a continue
run with the following continuation input file::

    > continue
    > nps 50000001   $ set nps above the value reached in the runtpe
    > print 40       $ skip extra print tables, which can be big
    > idum 100 4     $ sample 100 points per cm3 in meshtally 4

In the ``outp`` file generated by the modified MCNP there will be two custom
tables. Table ``print table FIS`` contains material compositions in the FISPACT
format (suitable for the ``FUEL`` keyword) and table ``print table CMI``
contains cell names, material indices and names and cell densities and
concentrations. These tables can be extracted with the script
``extract_tables.sh``, which takes as the 1-st argument the name of the outp
file::

    > $R2S_ROOT/scripts/extract_tables.sh outp

The irradiation scenario must be given in ``inventory_input_footer``. A
template for this file can be found in ``$R2S_ROOT/files/`` folder. Copy this
template to ``input`` and modify as necessary. Values for the ``FLUX`` keywords
are used to multiply flux intensity from ``meshtal.fine`` and thus depends on
the tally multiplier applied for neutron flux intensity. For ITER applications
with the standard neutron source and no tally multiplier, the value 1.973e19
after the ``FLUX`` keyword corresponds to 500 MW level and has units neutrons
per second. 

All names of the input files are passed to the driver via environment
variables. These variables are set in ``r2s_env.sh`` file. Copy
``$R2S_ROOT/r2s_env.sh`` to your local working place. In the simplest case, no
modifications are needed.

The fispact calculations are driven by ``adriver.exe`` (found in
``$R2S_ROOT/bin``) that can be run in parallel using MPI, or as a usual
sequential executable (useful for testing).  Script ``r2s_env.sh`` creates the
``$r2s_driver`` variable that points to the executable, i.e. always source it
before starting the driver::

    > . ./r2s_env.sh    # this defines $r2s_driver
    > $r2s_driver       # start the driver.

Among execution of the driver, two folders are created, ``out`` and ``log``
(actual names can be changed in ``r2s_env.sh``).  

Gamma intensities at each fine mesh element at every time interval are written
to files ``out/cgi.I,J.K``, where ``I``, ``J`` and ``K`` are indices of the
coarse mesh element. After successfull run, the ``out`` folder contains files
for each coarse mesh element where activation calculations were necessary (i.e.
where non-void cells were irradiated with non-zero neutron flux and activated
material has non-zero gamma source at particular time interval).

Log information from each MPI process is written to ``log/log.i`` file, where
``i`` is the process id (0 for the master process that reads all input data and
distributes job, and 1 to N-1 for the slave processes that actually start
fispact, where N is the number of MPI processes).

When the driver run succesfully, the decay gamma source at time interval M is
generaged by the ``form_dgs.sh`` script (found in ``$R2S_ROOT/scripts``) from
files ``out/cgi.*``. The first command line argument specifies the ``out`` folder, the rest arguments are the time interval numbers::

    > $R2S_ROOT/scripts/form_dgs.sh out 45 46     # form sources for time intervals 45 and 46 from files in out

The resulting files are written to ``out/dgs.n``, where ``n`` is the time interval number. For the above example, two files will be
created: ``out/dgs.45`` and ``out/dgs.46``. 

.. note:: 

    Note for Marconi cluster: it seems the $WORK file system is cached, i.e.
    the second reading of a file is much faster. For this reason, it is better
    to run ``form_dgs.sh`` script with all necessary time interval numbers at once, than calling
    it separately for each time interval

        > form_dgs.sh out 45 46 47 48 49 50   # this is faster than the next
        > form_dgs.sh out 45
        > form_dgs.sh out 46
        ...
        > form_dgs.sh out 50

Decay gamma source is used by the modified MCNP5 version,
``$R2S_ROOT/bin/mcnp5-dg.mpi``. If no source is specified in the MCNP input
file, it reads the ``dgs`` file and samples photos accordingly. The ``dgs``
name is hardcoded. Note that the ``dgs`` file is not stored in runtpe file.
This has two consequences: (1) the ``dgs`` file must be availabe at continue
run. (2) Another ``dgs`` file can be used in the continue run. In this way, the
initialization time can be saved, by generating runtpe with nps set to 1 and
using this runtpe with different ``dgs`` files.
       

