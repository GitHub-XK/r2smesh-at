diff -Naur -X exclude_patterns mcnp5-orig/bin/fpp mcnp5-r2s-md/bin/fpp
--- mcnp5-orig/bin/fpp	2014-12-01 13:34:32.000000000 +0100
+++ mcnp5-r2s-md/bin/fpp	2018-02-01 15:12:00.000000000 +0100
@@ -87,11 +87,11 @@
 $verbose = 0;
 #
 # MCNP6 defaults:  -nomacros  -blanks
-    $macro_substitute = 0;
-    $blanks  = 1;
+#   $macro_substitute = 0;
+#   $blanks  = 1;
 # MCNP5 defaults:  -macros  -noblanks
-#   $macro_substitute = 1;
-#   $blanks  = 0;
+    $macro_substitute = 1;
+    $blanks  = 0;
 #
 ##### get args
 #
diff -Naur -X exclude_patterns mcnp5-orig/Source/src/FILE.list mcnp5-r2s-md/Source/src/FILE.list
--- mcnp5-orig/Source/src/FILE.list	2014-12-01 13:34:32.000000000 +0100
+++ mcnp5-r2s-md/Source/src/FILE.list	2018-02-01 15:07:25.000000000 +0100
@@ -18,6 +18,7 @@
 echkcl.F90   electr.F90   electron_history.F90      emaker.F90   ephcom.F90   \
 eqpbbn.F90   erf2.F90     ergimp.F90   erprnt.F90   errprn.F90   escat.F90    eventp.F90   \
 exemes.F90   exmg.F90     expire.F90   expirx.F90   expung.F90   extran.F90   \
+findcells.F90 fispact_mod.F90 tblCMI.F90 \
 fastdr.F90   ffetch.F90   findel.F90   findlv.F90   finpht.F90   fixcom.F90   \
 flaug_elec.F90            flaug_phot.F90            forcol.F90   fshort.F90   \
 getexm.F90   getidt.F90   getpar.F90   getxs.F90    getxst.F90   ginst.F90    \
diff -Naur -X exclude_patterns mcnp5-orig/Source/src/findcells.F90 mcnp5-r2s-md/Source/src/findcells.F90
--- mcnp5-orig/Source/src/findcells.F90	1970-01-01 01:00:00.000000000 +0100
+++ mcnp5-r2s-md/Source/src/findcells.F90	2018-02-01 15:07:25.000000000 +0100
@@ -0,0 +1,120 @@
+subroutine findcells(iptc,xmin,xmax,ymin,ymax,zmin,zmax,kcells, istt)
+    ! PP (rmc_mod.F90 => rmcsor)
+    use mcnp_global
+    use mcnp_debug
+    use mcnp_random
+    parameter (max_find_cells=20,istat=100)
+    implicit real(dknd) (a-h,o-z)
+    integer,dimension(max_find_cells,2) :: kcells
+    integer, intent(out) :: istt
+
+    kcells=0
+
+    ! Use 1-st entry in IDUM card as the number of points per 1cm3.
+    if (idum(1) /= 0) then
+        istt = idum(1)
+    else
+        istt = istat
+    end if
+
+    vvcl=abs((xmax-xmin)*(ymax-ymin)*(zmax-zmin))
+    knst=vvcl*istt                ! x particles/cm3    
+    nhit=0
+    ! write(*,*)'iptc=',iptc
+    do lst = 1, knst  ! total number of points to sample
+        r1=rang()
+        r2=rang()
+        r3=rang()
+        xxx=xmin+r1*(xmax-xmin)
+        yyy=ymin+r2*(ymax-ymin)
+        zzz=zmin+r3*(zmax-zmin)
+        lev = 0
+        j=1
+
+        ! default for cel:  find the cell that contains xyz.
+        if( junf==0 ) then
+            do m = 1, nlse
+                icl = lse(klse+m)
+                jsu = 0
+                call chkcel(icl,2,j)
+                ! cell's importance is not checked. Since we only collect cells in the mesh's element.
+                ! Skipping cells of zero importance will affect volume fractions, computed as n/knst.
+                ! !   don't allow particle to start in zero-importance region
+                ! if( j==0 .and. fim(iptc,icl)==0 )  cycle
+                if( j==0 )  go to 900
+            enddo
+            do icl_tmp = 1, mxa
+                icl = icl_tmp
+                jsu = 0
+                call chkcel(icl,2,j)
+                ! !   don't allow particle to start in zero-importance region
+                ! if( j==0 .and. fim(iptc,icl)==0 )  cycle
+                if( j==0 )  go to 540
+            enddo
+            icl = icl_tmp
+        else
+            ! first, look among the cells, where the source has already been started
+            ! from.
+            do m = 1,nlse
+                icl = lse(klse+m)
+                if( jun(icl)/=0 )  cycle
+                jsu = 0  ! program number of the current surface. Affects output of chkcel: if jsu is a surface of icl, direction is tested as well.
+                call chkcel(icl,2,j)  ! j - output. If 0, xxx,yyy,zzz is in icl.
+                if( j/=0 )  cycle
+                if( mfl(1,icl)/=0 )  call levcel  ! if cell icl is filled, levcel changes to icl where particle actually is
+                go to 900
+            enddo
+            ! look among all other cells
+            do icl_tmp = 1,mxa
+                icl = icl_tmp
+                if( jun(icl)/=0 )  cycle
+                jsu = 0
+                call chkcel(icl,2,j)
+                !   don't allow particle to start in zero-importance region
+                ! if( j==0 .and. fim(iptc,icl)==0 )  cycle
+                if( j==0 )  go to 540
+            enddo
+            icl = icl_tmp
+        endif
+        call expirx(1,'sourcb','Point is not in any cell.')
+        cycle
+ 
+540     continue
+        nlse = nlse+1
+        lse(klse+nlse) = icl
+        if( junf/=0 ) then
+            if( mfl(1,icl)/=0 ) then
+                call levcel
+            endif
+        endif
+ 
+900     continue
+        nhit=nhit+1
+        iflg7=0
+        do m=1,max_find_cells
+            if(kcells(m,1) == icl) then
+                kcells(m,2)=kcells(m,2)+1
+                iflg7=1
+                exit
+            end if
+        end do
+        if(iflg7 == 1) cycle
+        do m=1,max_find_cells
+            if(kcells(m,1) == 0) then
+                kcells(m,1)=icl
+                kcells(m, 2) = 1
+                exit
+            end if
+        end do        
+    end do
+
+!    write(*,*)'***',nhit
+
+!   do m=1,max_find_cells
+!      ratmat=float(kcells(m,2))/float(knst)
+!      knmat=mat(kcells(m,1))
+!      if(kcells(m,2) /= 0) write(*,*)kcells(m,1),ratmat,knmat
+!   end do
+       
+    return
+end subroutine findcells
diff -Naur -X exclude_patterns mcnp5-orig/Source/src/fispact_mod.F90 mcnp5-r2s-md/Source/src/fispact_mod.F90
--- mcnp5-orig/Source/src/fispact_mod.F90	1970-01-01 01:00:00.000000000 +0100
+++ mcnp5-r2s-md/Source/src/fispact_mod.F90	2018-02-01 15:07:25.000000000 +0100
@@ -0,0 +1,39 @@
+! FISPACT module.
+! Provides data for writing material composition in format suitable for
+! FISPACT
+
+module fispact
+    implicit none
+    public:: f_name, f_get_name
+
+    character (len=2), dimension(112), parameter:: f_name =            & 
+         (/' H', 'He', 'Li', 'Be', ' B', ' C', ' N', ' O', ' F', 'Ne', & 
+           'Na', 'Mg', 'Al', 'Si', ' P', ' S', 'Cl', 'Ar', ' K', 'Ca', & 
+           'Sc', 'Ti', ' V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', & 
+           'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', ' Y', 'Zr', & 
+           'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', & 
+           'Sb', 'Te', ' I', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd', & 
+           'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', & 
+           'Lu', 'Hf', 'Ta', ' W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', & 
+           'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th', & 
+           'Pa', ' U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm', & 
+           'Md', 'No', 'Lr', 'Rf', 'Db', 'Sg', 'Bh', 'Hs', 'Mt', 'Ds', & 
+           'Rg', 'Cn' /)
+
+    contains
+        function f_get_name(za) result(s)
+            ! Return FISPACT name of nuclide za
+            implicit none
+            integer, intent(in):: za
+            character (len=6):: s
+
+            integer:: z, a
+
+            z = za / 1000
+            a = za - z*1000
+            write(s, '(a2,i3.3)') f_name(z:z), a 
+            return
+        end function f_get_name
+
+
+end module      
diff -Naur -X exclude_patterns mcnp5-orig/Source/src/msgtsk.F90 mcnp5-r2s-md/Source/src/msgtsk.F90
--- mcnp5-orig/Source/src/msgtsk.F90	2014-12-01 13:34:32.000000000 +0100
+++ mcnp5-r2s-md/Source/src/msgtsk.F90	2018-03-02 17:59:38.000000000 +0100
@@ -15,7 +15,8 @@
   use mcnp_input
   use dynamic_arrays
   use messages
-  use fmesh_mod, only :  fmesh_msgget, fmesh_msgtsk
+!  use fmesh_mod, only :  fmesh_msgget, fmesh_msgtsk
+  use fmesh_mod
   use isotopic_mod, only: isotopic_msgget
   use phtvr_mod, only :  phtvr_msgget
   use uran_mod,  only :  uran_msgget 
@@ -30,8 +31,20 @@
   integer(i8knd),allocatable ::  nc(:,:)
   integer(i8knd)     ::  i8a, i8b, i8c, i8d, i8i
   integer(i8knd)     ::  i_i8, np1_local
+  integer, parameter ::  max_find_cells = 20
+  integer,dimension(max_find_cells,2) :: kcells
   character(len=136) ::  hf
+  character(len=4)   ::  pf
+  character(len=20)  ::  name_out
+  character(len=19)  :: hd   ! ATr: for time stamp after each mesh element
+  integer            :: istt ! ATr: Number of sampled coordinates per 1cm3
   logical            ::  file_open
+  ! ATr
+  logical:: exis
+  integer:: i_p0, j_p0, k_p0
+  integer:: nacells, nvcells  ! number of cells and number of non-void cells
+  integer:: fmi               ! fmesh index for material detection
+  save iflo
 #ifdef AIX
   logical(4) :: is_assoc
 #else
@@ -213,6 +226,7 @@
 
   ! Subtasks -- execute the microtasks.
 
+
 110 continue
 
   ! Receive task assignments.
@@ -291,6 +305,7 @@
     &                   new_part1        = RN_hist_input,    &
     &                   output = .false. )
 
+
   do
 
     ! Receive the next microtask assignment.
@@ -584,6 +599,95 @@
 
   ! Subtasks -- respond to kill signal, exit, and stop.
 910 continue
+
+
+! PP
+
+    write(pf, '(i4)') mynum
+    name_out = 'outcells'//trim(adjustl(pf))
+    ifout = mynum + 100
+    write(*, *) name_out, ifout
+    open(ifout, file=name_out, status='new', action='write')
+
+    ! Get the fmesh number (not index) from idum(2)
+    if (idum(2) .gt. 0) then
+        fmi = 0
+        do i = 1, nmesh
+            if (fm(i)%id .eq. idum(2)) then
+                fmi = i
+                exit
+            end if
+        end do
+        if (fmi .eq. 0) then
+            write(*, *) "Fmesh for material detection idum(2)", idum(2), " not found"
+            stop
+        end if 
+    else
+        fmi = 1
+    end if 
+    write(*, *)'Metarial detected for mesh tally', fm(fmi)%id
+
+    ! icc_cells = (fm(fmi)%nxrb-1) * (fm(fmi)%nyzb-1) * (fm(fmi)%nztb-1)
+
+!   write(*,*)'i=',fm(fmi)%nxrb,' j=',fm(fmi)%nyzb,' k=',fm(fmi)%nztb,' mynum=',mynum
+
+    ! num_tot = icc_cells / ltasks
+
+    ! TODO: read the last line from ifout to continue from previuos run.  
+    ! Starting indices for i_p, j_p and k_p can be defined from
+    ! the xcc, ycc and zcc read on the last line.
+    m_p = 0
+    if (mynum .eq. 1) then
+        write(*, *) 'Mesh size:', fm(fmi)%nxrb - 1, fm(fmi)%nyzb - 1, fm(fmi)%nztb - 1
+    end if
+    do i_p = 1, fm(fmi)%nxrb - 1
+        call getidt(hd)
+        write(*, *) hd, '  Task', mynum, ' starts i = ', i_p 
+        do j_p = 1, fm(fmi)%nyzb - 1
+            do k_p = 1, fm(fmi)%nztb - 1
+            m_p = m_p + 1
+            if (m_p .eq. mynum) then
+                ! process mesh element only if not existed in the prevoius output file
+                xmin = fm(fmi)%xrbin(i_p)
+                xmax = fm(fmi)%xrbin(i_p+1)
+                ymin = fm(fmi)%yzbin(j_p)
+                ymax = fm(fmi)%yzbin(j_p+1)
+                zmin = fm(fmi)%ztbin(k_p)
+                zmax = fm(fmi)%ztbin(k_p+1)
+                xcc = (xmin+xmax) / 2.
+                ycc = (ymin+ymax) / 2.
+                zcc = (zmin+zmax) / 2.
+                iptc = 1  ! neutron
+                call findcells(iptc, xmin, xmax, ymin, ymax, zmin, zmax, kcells, istt)
+
+                ! Alternative implementation
+                nacells = count(kcells(:, 1) .gt. 0)  ! number of cells in the fine mesh element
+                nvcells = count(mat(kcells(1:nacells, 1)) .gt. 0)  ! number of non-void cells
+
+                if (nvcells .gt. 0) then 
+                    nhit = sum(kcells(:, 2))
+                    write(ifout, '(3i6, 3f10.3, i4, i12, <nacells>(10x, 3i12))') &
+                        i_p, j_p, k_p, & 
+                        xcc, ycc, zcc, &
+                        nacells, nhit,  & 
+                        (kcells(mcnt, 1), kcells(mcnt, 2), mat(kcells(mcnt, 1)), mcnt=1, nacells)
+                end if
+                ! Reset m_p for next element in this process
+                m_p = m_p - ltasks
+            end if
+            end do
+        end do
+    end do
+
+    call getidt(hd)
+    write(*,*) 'CPU ', mynum, ' completed at ', hd, 'for ', l1, l2, istt, '1/cm3'
+
+
+! PP
+
+
+911 continue
+
   call dm_sndi
   call dm_send(0,99,i)
   call dm_term
diff -Naur -X exclude_patterns mcnp5-orig/Source/src/sumary.F90 mcnp5-r2s-md/Source/src/sumary.F90
--- mcnp5-orig/Source/src/sumary.F90	2014-12-01 13:34:32.000000000 +0100
+++ mcnp5-r2s-md/Source/src/sumary.F90	2018-02-01 15:07:25.000000000 +0100
@@ -362,15 +362,22 @@
     call kprint
   endif
 
+  ! ATr: do not print out meshtal and mctal. This can take considerable time
   ! Print mesh tallies
-  if( nmesh>0 ) then
+  if( .FALSE. ) then
     call fmesh_print
   endif
 
   ! Print tally data.
-  if( ntal>0 ) then
+  if( .FALSE. ) then
     call tallyp
   endif
+  ! ATr
+
+  ! Print table with cell indices
+  call tblCMI
+  ! Print table with material compositino in fispact format
+  call tblFIS
 
   ! Generate weight-window cards at the end of the run.
   if( iwwg>0 .and. (nst/=0 .or. npp<0_i8knd) ) then
diff -Naur -X exclude_patterns mcnp5-orig/Source/src/tblCMI.F90 mcnp5-r2s-md/Source/src/tblCMI.F90
--- mcnp5-orig/Source/src/tblCMI.F90	1970-01-01 01:00:00.000000000 +0100
+++ mcnp5-r2s-md/Source/src/tblCMI.F90	2018-02-01 15:07:25.000000000 +0100
@@ -0,0 +1,76 @@
+! Subroutine to print out cell and material indices and numbers.
+subroutine tblCMI
+    use mcnp_params, only: iuo  
+    use mcnp_global, only: den, junf, jun, jmd, lca, mat, mxa, ncl, nmt, rho
+
+    implicit none
+    integer:: j
+
+    ! Print information about cell and mateiral indices and names to outp
+    write(iuo, '("1cell and material indices", 83x, "print table CMI")') 
+    write(iuo, '(8a16)') "Cell_index", "Cel_name", "Geometry_length", "Universe_number", "Material_index", "Material_name", "Density", "Conc"
+    if (junf /= 0) then
+        do j = 1, mxa ! number of cells in the problem, from fixcom
+            ! mat -- material numbers of the cells. From example in
+            ! tally.F90, indices -- cell indices, not names.
+            !
+            ! nmt(i) -- material name of material i, i = 1, nmat. Example in
+            ! rhoden.F90.
+            !
+            ! Number of surfaces that define cell icl is given by lca(icl+1) - lca(icl). 
+            ! For an example, seeach for lca(icl) in chksrc.F90.
+            write(iuo, 201) & 
+                j,                               &  ! cell index
+                ncl(j),                          &  ! cell name
+                abs(lca(j+1)) - abs(lca(j)),     &  ! Geometry length
+                jun(j),                          &  ! Universe
+                mat(j),                          &  ! Material index
+                nmt(mat(j)),                     &  ! Material name
+                den(j),                          &  ! Cell density
+                rho(j)                              ! Concentration
+        end do
+    else
+        ! in case junf == 0, jun is not allocated
+        do j = 1, mxa ! number of cells in the problem, from fixcom
+            ! mat -- material numbers of the cells. From example in
+            ! tally.F90, indices -- cell indices, not names.
+            !
+            ! nmt(i) -- material name of material i, i = 1, nmat. Example in
+            ! rhoden.F90.
+            !
+            ! Number of surfaces that define cell icl is given by lca(icl+1) - lca(icl). 
+            ! For an example, seeach for lca(icl) in chksrc.F90.
+            write(iuo, 201) & 
+                j,                               &  ! 
+                ncl(j),                          &  ! 
+                abs(lca(j+1)) - abs(lca(j)),     &  ! 
+                0,                               &  ! 
+                mat(j),                          &  ! 
+                nmt(mat(j)),                     &  ! 
+                den(j),                          &  ! 
+                rho(j)
+        end do
+    end if
+201 format( 6i16, 1pe16.7, e16.7)                         
+    write(iuo, '(" end of print table CMI")')
+end subroutine tblCMI      
+
+subroutine tblFIS
+    use mcnp_params, only: iuo  
+    use mcnp_global, only: fme, iza, jmd, nmat, nmt
+    use fispact, only: f_get_name 
+    ! print material compositions in FUEL fispact format
+    implicit none
+    integer:: im, m
+
+    write(iuo, '("1FISPACT format",83x,  "print table FIS")')
+    write(iuo, *) nmat
+    do im = 1, nmat
+        write(iuo, *) 'Material', im, nmt(im), jmd(im+1) - jmd(im)
+        do m = jmd(im), jmd(im + 1) - 1
+            write(iuo, *) iza(m), f_get_name(iza(m)), fme(m)
+        end do
+    end do
+    write(iuo, '(" end of print table FIS")')
+
+end subroutine tblFIS      
diff -Naur -X exclude_patterns mcnp5-orig/Source/src/torus.F90 mcnp5-r2s-md/Source/src/torus.F90
--- mcnp5-orig/Source/src/torus.F90	2014-12-01 13:34:32.000000000 +0100
+++ mcnp5-r2s-md/Source/src/torus.F90	2018-02-01 15:07:25.000000000 +0100
@@ -65,7 +65,16 @@
       if( t3==0. )  exit
       t3 = (uu(5)+xx(m)*(uu(4)+xx(m)*(uu(3)+xx(m)*(uu(2)+xx(m)))))/t3
       xx(m) = xx(m)-t3
-      if( abs(t3)<=z0 )  go to 40
+      ! Bug in torus evaluation that leads to infinite histories
+      ! if( abs(t3)<=z0 )  go to 40 
+      if ( abs(t3)<=z0 ) then
+          if (xx(m) < zero) then
+              cycle DO_60
+          else
+              go to 40
+          endif
+      endif
+      ! Bug in torus evaluation that leads to infinite histories
     end do
     if(krflg == 2)call errprn(1,-1,0,zero,zero,' ',' ','bad quartic solver root.')
     cycle DO_60
